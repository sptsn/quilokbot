class TelegramController < Telegram::Bot::UpdatesController
  include Telegram::Bot::UpdatesController::MessageContext

  skip_before_action :verify_authenticity_token, :require_user
  # before_action :update_telegram_username, except: :start

  before_action do
    case payload['text']
    when /–∑–∞—è–≤–∫/
      handle_order
    when /—É—Å–ª—É–≥–∏/
      handle_services
    when /–∫–æ–Ω—Ç–∞–∫—Ç—ã/
      handle_contacts
    else
      respond_with :message, text: '–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é'
    end
  end

  def handle_contacts
    text = "‚òéÔ∏è –ó–≤–æ–Ω–∏—Ç–µ: [+7(920)182-50-40](tel:+79201825040)
üíª –ù–∞—à —Å–∞–π—Ç: quilok.com
‚≠êÔ∏è –ú—ã –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö:
[–í–∫–æ–Ω—Ç–∞–∫—Ç–µ](https://vk.com/byquilok), [Facebook](https://fb.com/byquilok), [Instagram](https://instagram.com/byquilok)"

    respond_with :message, text: text, parse_mode: 'Markdown', disable_web_page_preview: true
  end

  def services_list
    {
      'üëæ –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞' => 'bot',
      'üíª –°–æ–∑–¥–∞—Ç—å —Å–∞–π—Ç-–≤–∏–∑–∏—Ç–∫—É' => 'landing',
      'üñ• –°–æ–∑–¥–∞—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω' => 'shop',
      'üìà –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç' => 'direct',
      'üí° SMM-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥' => 'smm',
      'üì∏ –°–æ–∑–¥–∞—Ç—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π —Ç—É—Ä' => 'tour',
      '‚û°Ô∏è –î—Ä—É–≥–æ–π –≤–æ–ø—Ä–æ—Å' => 'other'
    }
  end

  def handle_services
    text = "–ú—ã –º–æ–∂–µ–º:\n" + services_list.map{|key, value| key}.join("\n")

    respond_with :message,
      text: text
  end

  def update_telegram_username
    unless sender&.telegram_username
      sender.update_attribute(:telegram_username, from['username'])
    end
  end

  def start(data = nil, *)
    respond_with :message,
      text: "–î–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é",
      reply_markup: {
        keyboard: [ [text: 'üìù –ù–∞—à–∏ —É—Å–ª—É–≥–∏'], [text: '‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'], [text: 'üìå –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'] ],
        resize_keyboard: true
      }
  end

  def handle_order
    if sender.present?
      respond_services
    else
      save_context :wait_for_contact
      respond_with :message,
        text: '–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ',
        reply_markup: {
          keyboard: [ [text: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact: true] ],
          resize_keyboard: true
        }
    end
  end

  context_handler :wait_for_contact do |*words|
    if payload['contact'].present?
      client = Client.new(
        first_name: payload['contact']['first_name'],
        last_name: payload['contact']['last_name'],
        phone: payload['contact']['phone_number'],
        telegram_id: payload['contact']['user_id'],
        telegram_username: from['username']
      )

      if client.save
        respond_services
      else
        # save_context :wait_for_contact
        respond_with :message,
          text: "–û—à–∏–±–∫–∞: #{client.errors.full_messages.first}. –ó–∞–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
      end
    else
      session['name'] = words[0]
      save_context :wait_for_phone
      respond_with :message,
        text: '–¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä',
        reply_markup: {
          remove_keyboard: true
        }
    end
  end

  context_handler :wait_for_phone do |*words|
    client = Client.new(
      first_name: session[:name],
      phone: words[0],
      telegram_id: from['id'],
      telegram_username: from['username']
    )
    if client.save
      respond_services
    else
      # save_context :wait_for_phone
      respond_with :message,
        text: "–û—à–∏–±–∫–∞: #{client.errors.full_messages.first}. –ó–∞–ø–æ–ª–Ω–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑."
    end
  end

  def respond_services
    respond_with :message,
      text: '–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É',
      reply_markup: {
        inline_keyboard: services_list.map{ |key, value| [text: key, callback_data: value] }
      }
  end

  def callback_query(data)
    Order.create(
      kind: data,
      client_id: sender.id
    )

    User.all.each do |u|
      Telegram.bot.send_message text: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ #{sender.decorate.display_name} (#{sender.phone}), —Ç–µ–º–∞: #{services_list.key(data)}", chat_id: u.telegram_id
    end

    edit_message :text, text: "–í—ã–±—Ä–∞–Ω–∞ —É—Å–ª—É–≥–∞: #{services_list.key(data)}"

    respond_with :message,
      text: '–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú–µ–Ω–µ–¥–∂–µ—Ä –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –µ–µ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è üëåüèº',
      reply_markup: default_keyboard
  end


  protected

  def default_keyboard
    {
      keyboard: [ [text: 'üìù –ù–∞—à–∏ —É—Å–ª—É–≥–∏'], [text: '‚úèÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'], [text: 'üìå –ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã'] ],
      resize_keyboard: true
    }
  end

  def sender
    @sender ||= Client.find_by(telegram_id: from['id'])
  end

end
